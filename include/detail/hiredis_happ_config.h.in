// Copyright 2021 owent
// Created by OWenT on 2015/08/18.
//

#ifndef HIREDIS_HAPP_HIREDIS_HAPP_CONFIG_H
#define HIREDIS_HAPP_HIREDIS_HAPP_CONFIG_H

#pragma once

#if defined(_WIN32)
#  ifndef WIN32_LEAN_AND_MEAN
#    define WIN32_LEAN_AND_MEAN
#  endif
#  ifndef NOMINMAX
#    define NOMINMAX
#  endif
#endif

#include <stdint.h>
#include <algorithm>
#include <cstddef>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <memory>
#include <string>

#if defined(__cplusplus) && __cplusplus >= 201103L
#  include <atomic>
#  define HIREDIS_HAPP_ATOMIC_STD
#elif defined(__clang__) && (__clang_major__ > 3 || (__clang_major__ == 3 && __clang_minor__ >= 1)) && \
    __cplusplus >= 201103L
#  include <atomic>
#  define HIREDIS_HAPP_ATOMIC_STD
#elif defined(_MSC_VER) && _MSC_VER > 1700
#  include <atomic>
#  define HIREDIS_HAPP_ATOMIC_STD
#elif defined(__GNUC__)
#  if ((__GNUC__ == 4 && __GNUC_MINOR__ >= 5) || __GNUC__ > 4) && defined(__GXX_EXPERIMENTAL_CXX0X__)
#    include <atomic>
#    define HIREDIS_HAPP_ATOMIC_STD
#  endif
#elif defined(__clang__) || defined(__clang__) || defined(__INTEL_COMPILER)
#  if defined(__GNUC__) && (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 1))
#    error GCC version must be greater or equal than 4.1
#  endif
#  if defined(__INTEL_COMPILER) && __INTEL_COMPILER < 1100
#    error Intel Compiler version must be greater or equal than 11.0
#  endif

#  if defined(__GCC_ATOMIC_INT_LOCK_FREE)
#    define HIREDIS_HAPP_ATOMIC_GCC_ATOMIC 1
#  else
#    define HIREDIS_HAPP_ATOMIC_GCC 1
#  endif
#elif defined(_MSC_VER)
#  include <Windows.h>
#  define HIREDIS_HAPP_ATOMIC_MSVC 1
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#if defined(_MSC_VER)
#  pragma warning(push)

#  if ((defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L))
#    pragma warning(disable : 4996)
#    pragma warning(disable : 4309)
#  endif

#  if _MSC_VER < 1910
#    pragma warning(disable : 4800)
#  endif
#  pragma warning(disable : 4251)
#  pragma warning(disable : 4200)
#  pragma warning(disable : 4005)
#endif

#if defined(__GNUC__) && !defined(__clang__) && !defined(__apple_build_version__)
#  if (__GNUC__ * 100 + __GNUC_MINOR__ * 10) >= 460
#    pragma GCC diagnostic push
#  endif
#  pragma GCC diagnostic ignored "-Wunused-parameter"
#elif defined(__clang__) || defined(__apple_build_version__)
#  pragma clang diagnostic push
#  pragma clang diagnostic ignored "-Wunused-parameter"
#endif

#include <hiredis/async.h>
#include <hiredis/hiredis.h>
#include <hiredis/sds.h>

#if defined(__GNUC__) && !defined(__clang__) && !defined(__apple_build_version__)
#  if (__GNUC__ * 100 + __GNUC_MINOR__ * 10) >= 460
#    pragma GCC diagnostic pop
#  endif
#elif defined(__clang__) || defined(__apple_build_version__)
#  pragma clang diagnostic pop
#endif

#if defined(_MSC_VER)
#  pragma warning(pop)
#endif

#if defined(__cplusplus)
}
#endif

#define HIREDIS_HAPP_SLOT_NUMBER 16384

#if (defined(__cplusplus) && __cplusplus >= 201103L) || (defined(_MSC_VER) && _MSC_VER >= 1600)
#  include <unordered_map>
#  define HIREDIS_HAPP_MAP(...) std::unordered_map<__VA_ARGS__>

#else
#  include <map>
#  define HIREDIS_HAPP_MAP(...) std::map<__VA_ARGS__>
#endif

#ifndef HIREDIS_HAPP_TTL
#  define HIREDIS_HAPP_TTL 16
#endif

#ifndef HIREDIS_HAPP_TIMER_INTERVAL_SEC
// 0 s
#  define HIREDIS_HAPP_TIMER_INTERVAL_SEC 0
#endif

#ifndef HIREDIS_HAPP_TIMER_INTERVAL_USEC
// 100 ms
#  define HIREDIS_HAPP_TIMER_INTERVAL_USEC 100000
#endif

#ifndef HIREDIS_HAPP_TIMER_TIMEOUT_SEC
// 30 s
#  define HIREDIS_HAPP_TIMER_TIMEOUT_SEC 30
#endif

#if defined(_MSC_VER) && _MSC_VER >= 1600
#  define HIREDIS_HAPP_STRCASE_CMP(l, r) _stricmp(l, r)
#  define HIREDIS_HAPP_STRNCASE_CMP(l, r, s) _strnicmp(l, r, s)
#  define HIREDIS_HAPP_STRCMP(l, r) strcmp(l, r)
#  define HIREDIS_HAPP_STRNCMP(l, r, s) strncmp(l, r, s)
#else
#  define HIREDIS_HAPP_STRCASE_CMP(l, r) strcasecmp(l, r)
#  define HIREDIS_HAPP_STRNCASE_CMP(l, r, s) strncasecmp(l, r, s)
#  define HIREDIS_HAPP_STRCMP(l, r) strcmp(l, r)
#  define HIREDIS_HAPP_STRNCMP(l, r, s) strncmp(l, r, s)
#endif

#if (defined(_MSC_VER) && _MSC_VER >= 1600) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || \
    defined(__STDC_LIB_EXT1__)
#  define HIREDIS_HAPP_SSCANF(...) sscanf_s(__VA_ARGS__)

#  ifdef _MSC_VER
#    define HIREDIS_HAPP_VSNPRINTF(buffer, bufsz, fmt, arg) \
      vsnprintf_s(buffer, static_cast<size_t>(bufsz), _TRUNCATE, fmt, arg)
#    define HIREDIS_HAPP_SNPRINTF(...) sprintf_s(__VA_ARGS__)
#  else
#    define HIREDIS_HAPP_VSNPRINTF(buffer, bufsz, fmt, arg) vsnprintf_s(buffer, static_cast<size_t>(bufsz), fmt, arg)
#    define HIREDIS_HAPP_SNPRINTF(...) snprintf_s(__VA_ARGS__)
#  endif

#else
#  define HIREDIS_HAPP_SSCANF(...) sscanf(__VA_ARGS__)
#  define HIREDIS_HAPP_SNPRINTF(...) snprintf(__VA_ARGS__)
#  define HIREDIS_HAPP_VSNPRINTF(buffer, bufsz, fmt, arg) vsnprintf(buffer, static_cast<int>(bufsz), fmt, arg)
#endif

#ifdef _MSC_VER

#  ifndef inline
#    define inline __inline
#  endif

#  ifndef va_copy
#    define va_copy(d, s) ((d) = (s))
#  endif

#  ifndef snprintf
#    define snprintf c99_snprintf
#    define vsnprintf c99_vsnprintf

__inline int c99_vsnprintf(char *str, size_t size, const char *format, va_list ap) {
  int count = -1;

  if (size != 0) count = _vsnprintf_s(str, size, _TRUNCATE, format, ap);
  if (count == -1) count = _vscprintf(format, ap);

  return count;
}

__inline int c99_snprintf(char *str, size_t size, const char *format, ...) {
  int count;
  va_list ap;

  va_start(ap, format);
  count = c99_vsnprintf(str, size, format, ap);
  va_end(ap);

  return count;
}
#  endif

#endif

// ================ import/export ================
// @see https://gcc.gnu.org/wiki/Visibility
// @see http://releases.llvm.org/9.0.0/tools/clang/docs/AttributeReference.html
// Do not support borland/sunpro_cc/xlcpp

// ================ import/export: for compilers ================
#if defined(__GNUC__) && !defined(__ibmxl__)
//  GNU C++/Clang
//
// Dynamic shared object (DSO) and dynamic-link library (DLL) support
//
#  if __GNUC__ >= 4
#    if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__CYGWIN__)
// All Win32 development environments, including 64-bit Windows and MinGW, define
// _WIN32 or one of its variant spellings. Note that Cygwin is a POSIX environment,
// so does not define _WIN32 or its variants.
#      ifndef HIREDIS_HAPP_SYMBOL_EXPORT
#        define HIREDIS_HAPP_SYMBOL_EXPORT __attribute__((__dllexport__))
#      endif
#      ifndef HIREDIS_HAPP_SYMBOL_IMPORT
#        define HIREDIS_HAPP_SYMBOL_IMPORT __attribute__((__dllimport__))
#      endif

#    else

#      ifndef HIREDIS_HAPP_SYMBOL_EXPORT
#        define HIREDIS_HAPP_SYMBOL_EXPORT __attribute__((visibility("default")))
#      endif
#      ifndef HIREDIS_HAPP_SYMBOL_IMPORT
#        define HIREDIS_HAPP_SYMBOL_IMPORT __attribute__((visibility("default")))
#      endif
#      ifndef HIREDIS_HAPP_SYMBOL_VISIBLE
#        define HIREDIS_HAPP_SYMBOL_VISIBLE __attribute__((visibility("default")))
#      endif
#      ifndef HIREDIS_HAPP_SYMBOL_LOCAL
#        define HIREDIS_HAPP_SYMBOL_LOCAL __attribute__((visibility("hidden")))
#      endif

#    endif

#  else
// config/platform/win32.hpp will define HIREDIS_HAPP_SYMBOL_EXPORT, etc., unless already defined
#    ifndef HIREDIS_HAPP_SYMBOL_EXPORT
#      define HIREDIS_HAPP_SYMBOL_EXPORT
#    endif

#    ifndef HIREDIS_HAPP_SYMBOL_IMPORT
#      define HIREDIS_HAPP_SYMBOL_IMPORT
#    endif
#    ifndef HIREDIS_HAPP_SYMBOL_VISIBLE
#      define HIREDIS_HAPP_SYMBOL_VISIBLE
#    endif
#    ifndef HIREDIS_HAPP_SYMBOL_LOCAL
#      define HIREDIS_HAPP_SYMBOL_LOCAL
#    endif

#  endif

#elif defined(_MSC_VER)
//  Microsoft Visual C++
//
//  Must remain the last #elif since some other vendors (Metrowerks, for
//  example) also #define _MSC_VER
#else
#endif
// ---------------- import/export: for compilers ----------------

// ================ import/export: for platform ================
//  Default defines for HIREDIS_HAPP_SYMBOL_EXPORT and HIREDIS_HAPP_SYMBOL_IMPORT
//  If a compiler doesn't support __declspec(dllexport)/__declspec(dllimport),
//  its boost/config/compiler/ file must define HIREDIS_HAPP_SYMBOL_EXPORT and
//  HIREDIS_HAPP_SYMBOL_IMPORT
#if !defined(HIREDIS_HAPP_SYMBOL_EXPORT) && \
    (defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__CYGWIN__))

#  ifndef HIREDIS_HAPP_SYMBOL_EXPORT
#    define HIREDIS_HAPP_SYMBOL_EXPORT __declspec(dllexport)
#  endif
#  ifndef HIREDIS_HAPP_SYMBOL_IMPORT
#    define HIREDIS_HAPP_SYMBOL_IMPORT __declspec(dllimport)
#  endif
#endif
// ---------------- import/export: for platform ----------------

#ifndef HIREDIS_HAPP_SYMBOL_EXPORT
#  define HIREDIS_HAPP_SYMBOL_EXPORT
#endif
#ifndef HIREDIS_HAPP_SYMBOL_IMPORT
#  define HIREDIS_HAPP_SYMBOL_IMPORT
#endif
#ifndef HIREDIS_HAPP_SYMBOL_VISIBLE
#  define HIREDIS_HAPP_SYMBOL_VISIBLE
#endif
#ifndef HIREDIS_HAPP_SYMBOL_LOCAL
#  define HIREDIS_HAPP_SYMBOL_LOCAL
#endif

// ---------------- import/export ----------------

#if defined(HIREDIS_HAPP_API_NATIVE) && HIREDIS_HAPP_API_NATIVE
#  if defined(HIREDIS_HAPP_API_DLL) && HIREDIS_HAPP_API_DLL
#    define HIREDIS_HAPP_API HIREDIS_HAPP_SYMBOL_EXPORT
#  else
#    define HIREDIS_HAPP_API
#  endif
#else
#  if defined(HIREDIS_HAPP_API_DLL) && HIREDIS_HAPP_API_DLL
#    define HIREDIS_HAPP_API HIREDIS_HAPP_SYMBOL_IMPORT
#  else
#    define HIREDIS_HAPP_API
#  endif
#endif
#define HIREDIS_HAPP_API_HEAD_ONLY HIREDIS_HAPP_SYMBOL_VISIBLE

// error code
namespace hiredis {
namespace happ {
struct error_code {
  enum type {
    REDIS_HAPP_OK = REDIS_OK,
    REDIS_HAPP_UNKNOWD = -1001,           // unknown error
    REDIS_HAPP_HIREDIS = -1002,           // error happened in hiredis
    REDIS_HAPP_TTL = -1003,               // try more than ttl times
    REDIS_HAPP_CONNECTION = -1004,        // connect lost or connect failed
    REDIS_HAPP_SLOT_UNAVAILABLE = -1005,  // slot unavailable
    REDIS_HAPP_CREATE = -1006,            // create failed
    REDIS_HAPP_PARAM = -1007,             // param error
    REDIS_HAPP_TIMEOUT = -1008,           // timeout
    REDIS_HAPP_NOT_FOUND = -1009,         // not found
  };
};
}  // namespace happ
}  // namespace hiredis

#endif  // HIREDIS_HAPP_HIREDIS_HAPP_CONFIG_H
