#
# Appveyor configuration file for CI build of hiredis-happ on Windows (under Cygwin)
#
# For further details see http://www.appveyor.com
#

#
# Custom environment variables
#
environment:
  global:
    PREBUILT_ROOT: C:/Users/appveyor/prebuilt
    SETUP_ROOT: C:/Users/appveyor/setup
    PKG_SRC_ROOT: C:/Users/appveyor/pkg_src
    MSYS2_PREFIX: C:/tools/msys64
    MSYS2_LOG_FILE: C:/Users/appveyor/pkg_src/output.log
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      platform: x64
      CMAKE_GEN: Visual Studio 16 2019
      BUILD_SHARED_LIBS: "ON"
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      platform: x64
      CMAKE_GEN: Visual Studio 16 2019
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      platform: x64
      CMAKE_GEN: Visual Studio 15 2017 Win64
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x64
      CMAKE_GEN: Visual Studio 14 2015 Win64
    - os: MinGW
      CMAKE_GEN: MinGW32
    - os: MinGW
      CMAKE_GEN: MinGW64
    - os: MinGW
      CMAKE_GEN: MinGW64
      BUILD_SHARED_LIBS: "ON"

configuration: RelWithDebInfo

#
# Cache Cygwin files to speed up build
#
cache:
  - C:\Users\appveyor\prebuilt

#
# Do a shallow clone of the repo to speed up build
#
clone_depth: 1

#
# Initialisation prior to pulling the Mono repository
# Attempt to ensure we don't try to convert line endings to Win32 CRLF as this will cause build to fail
#
init:
  - ps: >-
      if ( -not ( Test-Path "$Env:PKG_SRC_ROOT" ) ) {

          mkdir "$Env:PKG_SRC_ROOT"

      }

      if ( -not ( Test-Path "$Env:MSYS2_PREFIX" ) ) {

          mkdir "$Env:MSYS2_PREFIX"

      }

  - ps: >-
      & git config --global core.autocrlf input

      if ( "$Env:OS" -ieq "MinGW" ) {

          if ( Test-Path "C:/msys64" ) {

              $Env:MSYS2_PREFIX="C:/msys64"

              $Env:PATH="$Env:MSYS2_PREFIX;$Env:PATH"

          } else {

              & cinst -y msys2 | Out-Host

          }

          echo "" > "$Env:MSYS2_LOG_FILE"

          Get-ChildItem "$Env:MSYS2_PREFIX"

      }

  - ps: >-
      if ( "$Env:OS" -ieq "MinGW" ) {

          echo "$Env:MSYS2_PREFIX/msys2_shell -lc 'pacman -Su --noconfirm --force > '$Env:MSYS2_LOG_FILE' 2>&1'"

          & "$Env:MSYS2_PREFIX/msys2_shell" -lc "pacman -Su --noconfirm --force > '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

          Get-Content "$Env:MSYS2_LOG_FILE"
      }

#
# Install needed build dependencies
#
install:
  - ps: >-
      if ( "$Env:OS" -ieq "MinGW" ) {

          & "$Env:MSYS2_PREFIX/msys2_shell" -lc 'for pkg_name in cmake m4 curl wget tar autoconf automake mingw-w64-x86_64-toolchain mingw-w64-x86_64-toolchain mingw-w64-i686-toolchain mingw-w64-x86_64-libtool mingw-w64-i686-libtool python; do pacman -S --noconfirm --force $pkg_name >> '$Env:MSYS2_LOG_FILE' 2>&1; done' | Out-Host

          Get-Content "$Env:MSYS2_LOG_FILE"

      } else {

          echo "No need install."

      }

# Build script
#
# NOTES:
#
# The stdin/stdout file descriptor appears not to be valid for the Appveyor
# build which causes failures as certain functions attempt to redirect
# default file handles. Ensure a dummy file descriptor is opened with 'exec'.
#
build_script:
  - ps: >-

      cd "$Env:APPVEYOR_BUILD_FOLDER"

      New-Item -Path build -ItemType directory

      cd build

      Remove-Item -r *

      if ( "$Env:OS" -ieq "MinGW" ) {

        $CMAKE_CONFIGURE_EXT_ARGS = ""

        if ( Test-Path Env:BUILD_SHARED_LIBS ) {

          $CMAKE_CONFIGURE_EXT_ARGS = "-DBUILD_SHARED_LIBS=ON"

        }

        if ( "$Env:CMAKE_GEN" -ieq "MinGW32" ) {

          echo "$Env:MSYS2_PREFIX/msys2_shell -mingw32 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; mkdir build cmake .. -G 'MSYS Makefiles' -DPROJECT_HIREDIS_HAPP_ENABLE_SAMPLE=ON -DPROJECT_HIREDIS_HAPP_ENABLE_UNITTEST=ON $CMAKE_CONFIGURE_EXT_ARGS; cmake --build ."

          & "$Env:MSYS2_PREFIX/msys2_shell" -mingw32 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; cmake .. -G 'MSYS Makefiles' -DPROJECT_HIREDIS_HAPP_ENABLE_SAMPLE=ON -DPROJECT_HIREDIS_HAPP_ENABLE_UNITTEST=ON $CMAKE_CONFIGURE_EXT_ARGS > '$Env:MSYS2_LOG_FILE' 2>&1; cmake --build . >> '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

          Get-Content "$Env:MSYS2_LOG_FILE"

        } else {

          echo "$Env:MSYS2_PREFIX/msys2_shell -mingw64 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; cmake .. -G 'MSYS Makefiles' -DPROJECT_HIREDIS_HAPP_ENABLE_SAMPLE=ON -DPROJECT_HIREDIS_HAPP_ENABLE_UNITTEST=ON $CMAKE_CONFIGURE_EXT_ARGS; cmake --build ."

          & "$Env:MSYS2_PREFIX/msys2_shell" -mingw64 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; cmake ..  -G 'MSYS Makefiles' -DPROJECT_HIREDIS_HAPP_ENABLE_SAMPLE=ON -DPROJECT_HIREDIS_HAPP_ENABLE_UNITTEST=ON $CMAKE_CONFIGURE_EXT_ARGS > '$Env:MSYS2_LOG_FILE' 2>&1; cmake --build . >> '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

          Get-Content "$Env:MSYS2_LOG_FILE"

        }

      } else {

        $CMAKE_CONFIGURE_ARGS = @("..", "-G", $Env:CMAKE_GEN)

        if ( "$Env:CMAKE_GEN" -ieq "Visual Studio 16 2019" ) {

            $CMAKE_CONFIGURE_ARGS += "-A", $Env:PLATFORM

        }

        if ( Test-Path Env:BUILD_SHARED_LIBS ) {
            $CMAKE_CONFIGURE_ARGS += "-DBUILD_SHARED_LIBS=ON"
        }

        $CMAKE_CONFIGURE_ARGS += "-DPROJECT_HIREDIS_HAPP_ENABLE_SAMPLE=ON", "-DPROJECT_HIREDIS_HAPP_ENABLE_UNITTEST=ON", "-DCMAKE_BUILD_TYPE=$Env:CONFIGURATION"

        echo "cmake $($CMAKE_CONFIGURE_ARGS -join ' ')"

        & cmake $CMAKE_CONFIGURE_ARGS

        echo "cmake --build . --config $Env:CONFIGURATION"

        & cmake --build . --config $Env:CONFIGURATION

      }
#
# Run unit test
# Can not get failed log in mingw, so just check if build success in mingw(custom test myself)
#
test_script:
  - ps: >-

      if ( "$Env:OS" -ieq "MinGW" ) {

        if ( "$Env:CMAKE_GEN" -ieq "MinGW32" ) {

          echo "$Env:MSYS2_PREFIX/msys2_shell -mingw32 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V -R hiredis-happ-run-test ;"

          & "$Env:MSYS2_PREFIX/msys2_shell" -mingw32 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V -R hiredis-happ-run-test > '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

          Get-Content "$Env:MSYS2_LOG_FILE"

        } else {

          echo "$Env:MSYS2_PREFIX/msys2_shell -mingw64 -lc cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V -R hiredis-happ-run-test ;"

          & "$Env:MSYS2_PREFIX/msys2_shell" -mingw64 -lc "cd '$Env:APPVEYOR_BUILD_FOLDER/build'; ctest . -V -R hiredis-happ-run-test > '$Env:MSYS2_LOG_FILE' 2>&1" | Out-Host

          Get-Content "$Env:MSYS2_LOG_FILE"

        }

      } else {

        if ( "$Env:CMAKE_GEN" -ieq "Visual Studio 16 2019" ) {

          $ENV:PATH = "$ENV:PATH;C:/OpenSSL-Win64/bin"

        }

        & ctest . -V -C $Env:CONFIGURATION -R hiredis-happ-run-test

      }

#
# Only build the master branch
#
branches:
  only:
    - master

# no need artifacts
